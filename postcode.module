<?php

use \Drupal\little_helpers\Webform\Webform;

/**
 * Implements hook_element_info().
 *
 * In addition to the usual #properties for textfields, postcodes have
 * some attributes to configure the validation.
 * - #postcode_country: An ISO-country code. If this is set to a non-empty
 *     value, this will be taken as country.
 * - #postcode_country_parents: An array of #parents that is used to find
 *     another form-field that holds the country value. This takes only effect
 *     if #postcode_country is empty.
 */
function postcode_element_info() {
  $elements['postcode'] = [
    '#theme' => 'textfield',
    '#theme_wrappers' => ['form_element'],
    '#input' => TRUE,
    '#process' => ['postcode_element_process'],
    '#element_validate' => ['postcode_element_validate'],
    // Needed as defaults for rendering as textfield.
    '#size' => 60,
    '#autocomplete_path' => FALSE,
    // Configure the validation.
    '#postcode_country' => NULL,
    '#postcode_country_parents' => [],
    '#postcode_country_cid' => NULL,
  ];
  return $elements;
}

/**
 * Form element process callback for the postcode element-type.
 */
function postcode_element_process($element, &$form_state) {
  $element['#attributes']['class'][] = 'form-postcode';
  return $element;
}

/**
 * Form element validate callback.
 */
function postcode_element_validate($element, &$form_state) {
  $value = &drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  // Empty values are valid if this element is not required.
  if (empty($value) && empty($element['#required'])) {
    return;
  }

  if (isset($element['#postcode_country'])) {
    $country = $element['#postcode_country'];
  }
  // webform3 if element is on same page.
  elseif (($parents = $element['#postcode_country_parents']) && drupal_array_get_nested_value($form_state['complete form'], $parents)) {
    $country = drupal_array_get_nested_value($form_state['values'], $parents);
  }
  // webform3 storage for previous step values.
  elseif (($cid = $element['#postcode_country_cid']) && isset($form_state['storage']['submitted'])) {
    $country = $form_state['storage']['submitted'][$cid];
  }
  elseif ($parents = $element['#postcode_country_parents']) {
    $country = drupal_array_get_nested_value($form_state['values'], $parents);
  }
  else {
    $country = FALSE;
  }

  $v = postal_code_validation_validate($value, $country);
  if (!empty($v['error'])) {
    form_error($element, t('Please enter a valid postcode.'));
  }
  else {
    // Set the normalized postcode as value.
    $value = $v['postal_code'];
  }
}

/**
 * Implements hook_webform_component_info().
 */
function postcode_webform_component_info() {
  $component_info['postcode'] = [
    'label' => t('Postcode'),
    'description' => t('A textfield that only accepts postcodes.'),
    'file' => 'webform.php',
    'features' => [
    ],
  ];
  return $component_info;
}

/**
 * Implements hook_form_builder_element_types().
 */
function postcode_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  module_load_include('components.inc', 'form_builder_webform');
  $types['postcode'] = [
    'title' => t('Postcode'),
    // Properties that may be edited on this field type.
    'properties' => [
      'title',
      'description',
      'field_prefix',
      'field_suffix',
      'default_value',
      'required',
      'size',
      'key',
      'postcode_country',
      'postcode_country_mode',
      'postcode_country_component',
    ],
    'default' => _form_builder_webform_default('postcode'),
  ];
  return $types;
}

/**
 * Implements hook_node_presave().
 *
 * Map form_builder-element_ids to actual webform component IDs.
 */
function postcode_node_presave($node) {
  if (!module_exists('form_builder_webform') || !isset($node->webform) || !isset($node->nid)) {
    return;
  }

  $map = [];
  foreach ($node->webform['components'] as $cid => $component) {
    if (isset($component['form_builder_element_id'])) {
      $map[$component['form_builder_element_id']] = $cid;
    }
  }

  $webform = new Webform($node);
  foreach ($webform->componentsByType('postcode') as $cid => $component) {
    $t = $component['extra']['postcode_country_component'];
    if (isset($t) && !is_numeric($t) && isset($map[$t])) {
      $node->webform['components'][$cid]['extra']['postcode_country_component'] = $map[$t];
    }
  }
}
